{"name":"Colifrapy","tagline":"Python Command Line Framework","body":"#Colifrapy\r\n\r\n##Description\r\nColifrapy is a **Command Line Framework for Python**.\r\nIts aim is to provide several tools to build robust and\r\nstructured command line tools very easily.\r\n\r\nIts logic is very similar to a MVC framework and is therefore easy to use.\r\n\r\n##Summary\r\n* [Installation](#installation)\r\n* [Philosophy](#philosophy)\r\n* [Concept](#concept)\r\n* [Usage](#usage)\r\n\t1. [Scaffolding](#scaffolding)\r\n\t2. [Command Line Hub](#command-line-hub)\r\n\t3. [Controller](#controller)\r\n\t4. [Settings](#settings)\r\n\t5. [Arguments](#arguments)\r\n\t6. [Model](#model)\r\n\t7. [Logger](#logger)\r\n\t8. [Eye Candy](#eye-candy)\r\n\t9. [Bonus](#bonus)\r\n* [Examples](#examples)\r\n* [Dependencies](#dependencies)\r\n* [License](#license)\r\n\r\n##Installation\r\nIt is recommanded to use colifrapy under a python virtualenv.\r\n\r\nInstall it with pip (version up to 0.3.0):\r\n\r\n```\r\npip install colifrapy\r\n```\r\n\r\nIf you want to use the latest one which is still in development :\r\n\r\n```\r\npip install git+https://github.com/Yomguithereal/colifrapy.git\r\n```\r\n\r\n##Philosophy\r\nAs every framework, colifrapy aims at enable you to work immediately on critical and intersting parts of\r\nyour code that will tackle the problems you need to solve instead of battling with petty\r\nthings such as the console output, your settings and the arguments passed to your tool.\r\n\r\nHowever, colifrapy is not a tyrant and does not force you to go its way. As such, every part of colifrapy can\r\nbe used on its own and you will remain free to code however you want to.\r\n\r\n##Concept\r\nWhen using colifrapy, your tool is called through a command line hub which acts more or less like a router and\r\ncalls upon a controller that will use one or several models to perform the job.\r\n\r\nYour hub has therefore the task to load a yaml configuration file containing your command line\r\narguments, name, version and even contextual settings if you need to.\r\n\r\nOnce those settings are loaded, every part of your application (mainly models) will remain able to access critical\r\nutilities such as argv opts, settings and make use of colifrapy's logger to ouptut nicely to the console.\r\n\r\nSo, schematically colifrapy is:\r\n\r\n\tSettings --> Command Line Hub --> Controller --> Model + Model + Model etc...\r\n\r\nEvery bit of colifrapy can be used as a standalone.\r\n\r\n\tLogger (outputs to console)\r\n\tSettings (deals with your yml settings)\r\n\tCommander (deals with argv)\r\n\r\n##Usage\r\n\r\n###Scaffolding\r\nColifrapy is able to create a new blank project for you.\r\n\r\n```sh\r\ncolifrapy new [project]\r\n\r\n# Options\r\n#    -a/--author [name] : name of the project's author\r\n```\r\n\r\nThis will create the necessary files to start working immediatly. I.e. a command line hub, a base\r\ncontroller, an example model, a config file, a string file and other frequent files such as .gitignore and such.\r\n\r\nTo test if the scaffolding has worked :\r\n```sh\r\ncd [project]\r\npython [project].py test\r\n```\r\n\r\nIt should output a header displaying your project's title, some string outputs, and a short line telling you\r\nall is going to be fine.\r\n\r\n---\r\n\r\n###Command Line Hub\r\nA colifrapy project relies on a command line hub which extends Colifrapy base class and which must\r\nbe called from the root of your project. The duty of this hub is just to launch your tool, analyze\r\nthe arguments given to it and call upon the relevant controller methods.\r\n\r\nIn fact, this hub can be compared to a basic router for web frameworks.\r\n\r\nThis is the hub as it will be generated by the scaffolder :\r\n\r\n```python\r\n# Dependencies\r\n#=============\r\nfrom colifrapy import Colifrapy\r\nfrom model.controller import Controller\r\n\r\n# Hub\r\n#======\r\nclass NameOfYourProject(Colifrapy):\r\n\r\n    # From this hub, you can access several things :\r\n\t#    self.settings (Settings Instance)\r\n\t#    self.log (Logger Instance)\r\n\t#    self.opts (Options passed to your hub)\r\n\t#    self.controller (Your Controller)\r\n\r\n    def launch(self):\r\n\r\n        # Welcoming visitors\r\n        self.log.header('main:title')\r\n\r\n        # Calling upon the controller\r\n        self.controller.test()\r\n\r\n# Launching\r\n#===========\r\nif __name__ == '__main__':\r\n\t# By default, the hub will load config/settings.yml\r\n    hub = NameOfYourProject(Controller, [optional]'path/to/your/settings.yml')\r\n    hub.launch()\r\n```\r\n\r\n---\r\n\r\n###Controller\r\nThe controller is a class that will call upon your models to perform actions. It is in fact a colifrapy Model instance, but this must not disturb you.\r\n\r\nThe controller is totally optional and just illustrate a\r\nway to organize your code.\r\nIf you don't want to follow this logic, just don't pass a controller to your hub instance.\r\n\r\nExample of controller as generated by the scaffolder:\r\n\r\n```python\r\n# Dependencies\r\n#=============\r\nfrom colifrapy import Model\r\nfrom example_model import ExampleModel\r\n\r\n# Main Class\r\n#=============\r\nclass Controller(Model):\r\n\r\n    # Properties\r\n    example_model = None\r\n\r\n    def __init__(self):\r\n        self.example_model = ExampleModel()\r\n\r\n    # Example of controller action\r\n    def test(self):\r\n        self.log.write('main:controller')\r\n        self.example_model.hello()\r\n```\r\n\r\n---\r\n\r\n\r\n###Settings\r\nThe Settings class is the first class loaded by colifrapy to perform its magic. It will parse your settings.yml file and configure your logger, arguments and every other configuration you want for your application.\r\n\r\nconfig/settings.yml file:\r\n\r\n```yaml\r\n# Basic Informations\r\nversion: '[project-name] 0.1.0'\r\ndescription: 'Description of the program.'\r\narguments:\r\n- [ ['-t', '--test'], {'help' : 'Test', 'type' : 'int'} ]\r\n- [ ['positionnal'] ]\r\n\r\n# Logger Settings\r\nlogger:\r\n    strings: 'config/strings.yml'\r\n    flavor: 'default'\r\n    title_default: 'default'\r\n    # Delete the path line not to write the log to a file\r\n    path: 'logs'\r\n    threshold: ['DEBUG', 'ERROR', 'INFO', 'WARNING', 'VERBOSE']\r\n\r\n# Generic Settings needed by your program\r\nsettings:\r\n    hello: 'world'\r\n    bonjour: 3.4\r\n    hash: {'test' : 2}\r\n```\r\n\r\nThe settings are loaded automatically by colifrapy but you still can use its logic elsewhere if\r\nyou need it.\r\n\r\nAn example of external use :\r\n\r\n```python\r\n# Importing\r\nfrom colifrapy import Settings\r\n\r\n# Instanciating settings\r\nsettings = Settings()\r\n\r\n# Let the path blank to fetch 'config/settings.yml' by default\r\nsettings.load('path/to/your/settings.yml')\r\n\r\n# Now use it\r\nprint settings.hello\r\n>>> 'world'\r\n\r\nprint settings.hash['test']\r\n>>> 2\r\n```\r\n\r\nThe Settings class is a singleton. You can therefore use it everywhere without having to reload the data.\r\n\r\n---\r\n\r\n###Arguments\r\nArguments are to be defined as for the python [ArgParser](http://docs.python.org/dev/library/argparse.html \"ArgParser\") class. In fact,\r\nthe colifrapy Commander class extends the ArgParser one, so, if you need complicated things not handled by colifrapy, just use the Commander class like the ArgParser one.\r\n\r\nExamples of argument declaration:\r\n```yaml\r\narguments:\r\n- [ ['-t', '--test'], {'help' : 'Test', 'type' : 'int', 'default' : 5} ]\r\n- [ ['-b', '--blue'], {'help' : 'Blue option', 'type' : 'int', 'required' : 'True'} ]\r\n- [ ['some_positionnal_argument'] ]\r\n```\r\n\r\nOnce the settings are loaded, you can access your options through:\r\n```python\r\nfrom colifrapy import Commander\r\ncommand = Commander()\r\n\r\nprint command.opts.test\r\n>>> 5\r\n\r\n# Or from a hub/model\r\nprint self.opts.test\r\n>>> 5\r\n```\r\nAs for the Settings class, the Commander class is a singleton and its state won't change if you load it elsewhere.\r\n\r\nIn the command hub and in your models, you can access the options passed to your commander through\r\nself.opts . However, even if those are accessible in models for commodity, only the main hub should use them and one should restrain their usage in models.\r\n\r\n\r\n---\r\n\r\n\r\n###Model\r\nModels are the bulk of Colifrapy. You can extend them to acces your settings and commands easily.\r\n\r\nAn example model is generated for you by the Scaffolder when you create a new project.\r\n\r\n```python\r\nfrom colifrapy import Model\r\n\r\nclass MyModel(Model):\r\n\tdef test(self):\r\n\t\tprint self.settings.hello\r\n\r\nm = MyModel()\r\nm.test()\r\n>>> 'world'\r\n```\r\n\r\nReserved attributes names are:\r\n\r\n\tlog (access to the logger described right after)\r\n\topts (access to the command line options)\r\n\tsettings (access to the program's settings)\r\n\r\n\r\n---\r\n\r\n###Logger\r\n\r\n####Basic\r\nThe logger is the outputting class of colifrapy. It should be loaded with some strings by the settings.\r\nIf no strings are given, the logger will just output normally the argument string you give to it.\r\n\r\n####Levels\r\nThe logger accepts five levels :\r\n\r\n\tINFO (green output)\r\n\tVERBOSE (cyan output)\r\n\tDEBUG (blue output)\r\n\tWARNING (yellow ouput)\r\n\tERROR (red output) --> will throw an exception for you to catch or not\r\n\r\nBy default, if no level is specified for a message, DEBUG will always be taken.\r\n\r\n####Strings\r\nStrings are externalized to enable you to quickly modify them if\r\nneeded, or even translate them easily.\r\n\r\nThe string format used is [Mustache](http://mustache.github.io/), so variables\r\ncome likewise : {{some_variable}}\r\n\r\nStrings given must follow this yaml layout:\r\n```yaml\r\nmain:\r\n    process:\r\n    \t# String with a variable contained within the mustaches\r\n        start: 'Starting corpus analysis (path : {{path}})//INFO'\r\n        # Simply write two slashes at the end to specify the level of the message\r\n        end: 'Exiting//WARNING'\r\n        test_line_break: '\\nBonjour'\r\n    title: 'Colifrapy'\r\nother_string_category:\r\n\ttest: 'Hello everyone//INFO'\r\n\tyou:\r\n\t\tcan:\r\n\t\t\tmake: 'any levels that you want'\r\n\t\t\tso: 'you can organize your strings however you need.'\r\n```\r\n\r\n####Usage\r\nThis is how you would use the logger in a colifrapy model:\r\n```python\r\nfrom colifrapy import Model\r\n\r\nclass MyModel(Model):\r\n\tdef test(self):\r\n\r\n\t\t# Main method\r\n\t\t#------------\r\n\r\n\t\t# Outputting a message\r\n\t\tself.log.write('main:process:end')\r\n\t\t>>> '[WARNING] :: Exiting'\r\n\r\n\t\t# Overriding the message level\r\n\t\tself.log.write('main:process:end', 'INFO')\r\n\t\t>>> '[INFO] :: Exiting'\r\n\r\n\t\t# Passing variables\r\n\t\tself.log.write('main:protocol:start', {'path' : 'test'})\r\n\t\t>>> '[INFO] :: Starting corpus analysis (path : test)'\r\n\r\n\t\t# When yml file is not specified or if message does not match\r\n\t\tself.log.write('Test string', level='DEBUG')\r\n\t\t>>> '[DEBUG] :: Test string'\r\n\r\n\t\t# Named arguments of write\r\n\t\t# variables --> hash\r\n\t\t# level --> log level\r\n\r\n\t\t# Helper methods\r\n\t\t#---------------\r\n\r\n\t\t# Printing a header (yellow color by default)\r\n\t\tself.log.header('main:title', [optional]color)\r\n\t\t>>> Colifrapy\r\n\t\t>>> ---------\r\n\r\n\t\t# Asking for confirmation (purple color)\r\n\t\t# 'y' will be taken by default in arg 2\r\n\t\t# will return True for y and False for n\r\n\t\tself.log.confirm('Are you sure you want to continue?')\r\n\t\t>>> 'Are you sure you want to continue? (Y/n)'\r\n\r\n\t\tself.log.confirm('Are you sure you want to continue?', 'n')\r\n\t\t>>> 'Are you sure you want to continue? (y/N)'\r\n\r\n\t\t# Write methods shorteners\r\n\t\tself.log.error(message, vars)\r\n\t\tself.log.warning(...)\r\n\t\tself.log.info(...)\r\n\t\tself.log.debug(...)\r\n\t\tself.log.verbose(...)\r\n```\r\n\r\n####Configuration\r\nYou can pass some options to your logger within the settings.yml file.\r\n\r\nExample:\r\n```yaml\r\n# Logger settings\r\nlogger:\r\n\tstrings: 'path/to/your/strings.yml'\r\n\r\n\t# optional, discard the line not to log to a file\r\n\tpath: 'path/where/to/log/'\r\n\r\n\t# optional, use it to specify your logger threshold\r\n\t# ERROR will always be kept whatsoever for obvious reasons, even if you drop it\r\n\tlog_threshold : ['DEBUG', 'ERROR']\r\n\r\n\t# optional (default, False), whether you want your errors to raise exceptions\r\n\texceptions: False\r\n\r\n\t# flavors (see Eyecandy) you can drop those lines if you want default\r\n\tflavor: 'default'\r\n\ttitle_flavor: 'default'\r\n```\r\n\r\n####Standalone Usage\r\nThe Logger is also a singleton, you can use it as a standalone, if you need to :\r\n\r\n```python\r\nfrom colifrapy import Logger\r\n\r\nlog = Logger()\r\n\r\n# If you haven't configured it before in your code and you use it outside colifrapy\r\n# Pass kwargs to it corresponding to the logger options in settings.yml\r\nlog.config(**kwargs)\r\n\r\nlog.debug('test')\r\n>> [DEBUG] :: test\r\n```\r\n\r\n---\r\n\r\n###Eye Candy\r\nColifrapy comes with visual alternatives (two for the moment, but more will come). They are called\r\n'flavors' and can be set in the Logger's settings.\r\n\r\n####Title Flavors:\r\n\r\n#####default\r\n```\r\nTitle\r\n-----\r\n```\r\n\r\n#####heavy\r\n```\r\n#########\r\n# Title #\r\n#########\r\n```\r\n\r\n####Logger Flavors:\r\n\r\n#####default\r\n```\r\n[DEBUG] :: text\r\n```\r\n\r\n#####flat\r\n```\r\ndebug : text\r\n```\r\n\r\n---\r\n\r\n###Bonus\r\nColifrapy also gives access to a colorization function, a custom exception class and a basic singleton decorator if needed.\r\n\r\n```python\r\nfrom colifrapy.tools.colorize import colorize\r\nprint colorize('hello', 'blue')\r\n\r\nfrom colifrapy.tools.decorators import singleton\r\n\r\n@singleton\r\nclass MySingleton():\r\n\tpass\r\n\r\n# Custom Exception Carrying data\r\nfrom colifrapy import DataException\r\nraise DataException(message, data)\r\n```\r\n\r\n##Examples\r\nMy project [furuikeya](https://github.com/Yomguithereal/furuikeya) is a good example of the usage\r\nof colifrapy since colifrapy was originally designed to help me doing it.\r\n\r\n##Dependencies\r\n\r\n\tpyyaml\r\n\tpystache\r\n\r\n##License\r\nColifrapy is under a MIT license.","google":"UA-42948821-1","note":"Don't delete this file! It's used internally to help with page regeneration."}